# Based on https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

{{- if .Values.affinity.enabled }}
aistoreMonitoringAffinity: &aistoreMonitoringAffinity
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
          - key: {{ .Values.affinity.nodeMatchKey  }}
            operator: In
            values:
              - "true"
{{- end }}

aistoreMonitoringSecurityContext: &aistoreMonitoringSecurityContext
  runAsGroup: {{ .Values.securityContext.runAsGroup }}
  runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
  runAsUser: {{ .Values.securityContext.runAsUser }}
  fsGroup: {{ .Values.securityContext.fsGroup }}

prometheusOperator:
  {{- if .Values.affinity.enabled }}
  affinity: *aistoreMonitoringAffinity
  {{- end }}

prometheus:
  prometheusSpec:
    securityContext: *aistoreMonitoringSecurityContext
    {{- if .Values.affinity.enabled }}
    affinity: *aistoreMonitoringAffinity
    {{- end }}
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    {{- if hasKey .Values "prometheus" }}
    {{- if hasKey .Values.prometheus "remoteUrl" }}
    remoteWrite:
      - url: {{ .Values.prometheus.remoteUrl }}
    {{- end }}
    {{- if hasKey .Values.prometheus "clusterLabel" }}
    externalLabels:
      cluster: {{ .Values.prometheus.clusterLabel }}
    {{- end }}
    {{- end }}

thanosRuler:
  thanosRulerSpec:
    securityContext: *aistoreMonitoringSecurityContext
    {{- if .Values.affinity.enabled }}
    affinity: *aistoreMonitoringAffinity
    {{- end }}

grafana:
  enabled: {{ .Values.grafana.enabled }}
  {{- if .Values.affinity.enabled }}
  affinity: *aistoreMonitoringAffinity
  {{- end }}
  adminPassword: {{ env "GRAFANA_PASSWORD" | quote }}
  securityContext: *aistoreMonitoringSecurityContext
  {{- if hasKey .Values.grafana "datasources" }}
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          url: {{ .Values.grafana.datasources.loki.url }}
          access: proxy
          editable: true
  {{- end }}


  {{- if hasKey .Values.grafana "persistence" }}
  persistence:
    type: pvc
    enabled: true
    storageClassName: {{ .Values.grafana.persistence.storageClassName }}
    accessModes:
      - ReadWriteOnce
    size: {{ .Values.grafana.persistence.size }}
  {{- end }}

kube-state-metrics:
  {{- if .Values.affinity.enabled }}
  affinity: *aistoreMonitoringAffinity
  {{- end }}

defaultRules:
  rules:
    kubeControllerManager: false
    kubernetesStorage: false
    kubernetesSystem: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
    nodeExporterAlerting: false
    nodeExporterRecording: false
