livedebugging {
  enabled = true
}

{{- if and .Values.remote .Values.mimir }}
{{- if .Values.mimir.ngc_endpoint }}
prometheus.remote_write "ngc" {
  endpoint {
    url = "{{ .Values.mimir.ngc_endpoint }}"
    remote_timeout = "15s"
  }
  external_labels = {
    cluster = "{{ .Values.remote.label }}",
    tenant = "anonymous",
  }
}
{{- end }}

{{- if .Values.mimir.panoptes_endpoint }}
otelcol.receiver.prometheus "panoptes_receiver_import" {
  output {
    metrics = [otelcol.processor.attributes.panoptes_insert_label.input]
  }
}

otelcol.exporter.otlphttp "panoptes_metrics_export" {
  client {
    auth = otelcol.auth.oauth2.azure_oidc.handler
    endpoint = "{{ .Values.mimir.panoptes_endpoint }}"
  }
}
{{- end }}

prometheus.relabel "remote_metrics" {
  forward_to = [
    {{- if .Values.mimir.panoptes_endpoint }}
    prometheus.remote_write.ngc.receiver,
    {{- end }}
    {{- if .Values.mimir.ngc_endpoint }}
    otelcol.receiver.prometheus.panoptes_receiver_import.receiver,
    {{- end }}
  ]
}

prometheus.relabel "all_metrics" {
  forward_to = [
    {{- if and .Values.prometheus .Values.prometheus.localGateway }}
    prometheus.relabel.local_metrics.receiver,
    {{- end }}
    prometheus.relabel.remote_metrics.receiver,
  ]
}

{{- end }}


{{- if and .Values.prometheus .Values.prometheus.localGateway }}
prometheus.relabel "local_metrics" {
  forward_to = [prometheus.remote_write.local.receiver]
  rule {
    action = "replace"
    target_label = "cluster"
    replacement = "local"
  }
}

prometheus.remote_write "local" {
  endpoint {
    url = {{ .Values.prometheus.localGateway | quote }}
    remote_timeout = "15s"
  }
  external_labels = {
    "cluster" = "local",
  }
}
{{- end }}

discovery.kubernetes "ais_proxy_pods" {
  role = "pod"
  namespaces {
    names = ["ais"]
  }
  selectors {
    role = "pod"
    label = "app=ais,component=proxy" 
  }
}

discovery.kubernetes "ais_target_pods" {
  role = "pod"
  namespaces {
    names = ["ais"]
  }
  selectors {
    role = "pod"
    label = "app=ais,component=target" 
  }
}

discovery.relabel "all_aisnode" {
  targets = concat(
    discovery.kubernetes.ais_target_pods.targets,
    discovery.kubernetes.ais_proxy_pods.targets,
  )
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "keep"
    regex = "ais-node"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_label_component"]
    action = "replace"
    target_label = "component"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
}

prometheus.exporter.unix "system" { 
  // Include NVME and SD only by default
  disk {
    device_include = "^(nvme\\d+|sd[a-z]+)"
  }
  netdev {
    device_exclude = "^(veth|lo|flannel|cni).*"
  }
  filesystem {
    mount_points_exclude = "^/(dev|var|proc|run|sys|tmp)($|/)"
  }
}

prometheus.scrape "system" {
  targets = prometheus.exporter.unix.system.targets
  forward_to = [prometheus.relabel.node_exporter.receiver]
}

discovery.kubernetes "kube_state_metrics" {
  role = "pod"
  selectors {
    role = "pod"
    label = "app.kubernetes.io/name=kube-state-metrics"
  }
}

discovery.relabel "ksm" {
  targets = discovery.kubernetes.kube_state_metrics.targets
  
  rule {
    source_labels = ["__meta_kubernetes_pod_container_port_number"]
    regex = "8080"
    action = "keep"
  }
}

prometheus.scrape "aistore" {
  targets = discovery.relabel.all_aisnode.output
  forward_to = [prometheus.relabel.aistore.receiver]
  job_name = "aistore"
  scrape_interval = "30s"
  metrics_path = "/metrics"
  {{- if .Values.https }}
  scheme = "https"
  tls_config {
    insecure_skip_verify = true
  }
  {{- end }}
}

prometheus.relabel "aistore" {
  // Disable any high-cardinality labels like transaction id
  rule {
    action = "replace"
    source_labels = ["xid"]
    target_label = "xid"
    regex = "(.+)"
    replacement = "aggregated"
  }
  forward_to = [prometheus.relabel.redirect.receiver]
}