{{- if and .Values.remote .Values.loki }}

{{- if .Values.loki.remoteEndpoint }}
otelcol.receiver.loki "remote_loki_receiver" {
  output {
    logs = [otelcol.exporter.otlphttp.remote_logs_export.input]
  }
}
otelcol.exporter.otlphttp "remote_logs_export" {
  client {
    auth = otelcol.auth.oauth2.azure_oidc.handler
    endpoint = "{{ .Values.loki.remoteEndpoint }}"
  }
}
{{- end }}

loki.relabel "remote" {
  forward_to = [
    {{- if .Values.loki.remoteEndpoint }}
    otelcol.receiver.loki.remote_loki_receiver.receiver,
    {{- end }}
  ]
  rule {
    action = "keep"
    source_labels = ["app"]
    regex = "ais"
  }
  rule {
    action = "replace"
    target_label = "cluster"
    replacement = "{{ .Values.remote.label }}"
  }
}

loki.relabel "all_logs" {
  forward_to = [
    {{- if .Values.loki.localGateway }}
    loki.write.local.receiver,
    {{- end }}
    {{- if .Values.loki.remoteEndpoint }}
    loki.relabel.remote.receiver,
    {{- end }}
  ]
}
{{- end }}

loki.process "ais_extract_level" {
  stage.match {
    selector = "{namespace=\"ais\", app=\"ais\"}"

    // Extract first non-space character (i.e. I/W/E)
    stage.regex {
      expression = "^[ \\t]*(?P<level>[IWE])\\b"
    }

    // Promote extracted level to a label
    stage.labels {
      values = { level = "level" }
    }
  }

  forward_to = [ loki.relabel.ais_map_level.receiver ]
}

loki.relabel "ais_map_level" {
  rule {
    action        = "replace"
    source_labels = ["level"]
    regex         = "^I$"
    target_label  = "level"
    replacement   = "info"
  }

  rule {
    action        = "replace"
    source_labels = ["level"]
    regex         = "^W$"
    target_label  = "level"
    replacement   = "warn"
  }

  rule {
    action        = "replace"
    source_labels = ["level"]
    regex         = "^E$"
    target_label  = "level"
    replacement   = "error"
  }

  forward_to = [
    {{- if .Values.loki.localGateway }}
    loki.write.local.receiver,
    {{- end }}
    {{- if .Values.loki.remoteEndpoint }}
    loki.relabel.remote.receiver,
    {{- end }}
  ]
}

{{- if .Values.loki.localGateway }}
loki.write "local" {
  endpoint {
    url = {{ .Values.loki.localGateway | quote }}
  }
  external_labels = {
    cluster = "local",
  }
}
{{- end }}

discovery.kubernetes "pod" {
  role = "pod"
  selectors {
    role = "pod"
    field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
  }
}

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name" -- preferred label
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation - As fallback set "app" field from "__meta_kubernetes_pod_label_app" if the "app" label exists
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app"]
    action = "replace"
    target_label = "app"
    regex = "(.+)"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}