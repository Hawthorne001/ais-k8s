{{ ansible_managed | comment }}
---
apiVersion: ais.nvidia.com/v1beta1
kind: AIStore
metadata:
  name: ais
  namespace: {{ cluster }}
spec:
  # Add fields here
  size: {{ cluster_size }}
  configToUpdate:
{% if protocol == "https" %}
    net:
      http:
        server_crt: "/var/certs/tls.crt"
        server_key: "/var/certs/tls.key"
        use_https: true
        skip_verify: {{ skip_verify_cert }} # if you are using self signed certs
        client_ca_tls: "/var/certs/ca.crt"
        client_auth_tls: {{ client_auth_tls }}
{% endif %}

  enablePromExporter: false
  proxySpec:
    hostPort: 51080
    servicePort: 51080
    portPublic: 51080
    portIntraControl: 51082
    portIntraData: 51083
    capabilities:
      privileged: true
{% if (sysctls is defined) and (sysctls != "") %}
    securityContext: 
      sysctls: {{ sysctls }}
{% endif %}
    nodeSelector:
      nvidia.com/ais-proxy: {{ cluster }}
{% if proxy_size is defined and proxy_size | int > 0 and proxy_size | int <= cluster_size | int %}
    size: {{ proxy_size }}
{% endif %}

  targetSpec:
    env: 
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/gcp/gcp.json
    hostPort: 51081
    servicePort: 51081
    portPublic: 51081
    portIntraControl: 51082
    portIntraData: 51083
    capabilities:
      privileged: true
    hostNetwork: {{ host_network }}
{% if target_size is defined and target_size | int > 0 and target_size | int <= cluster_size | int %}
    size: {{ target_size }}
{% endif %}

{% if (sysctls is defined) and (sysctls != "") %}
    securityContext: 
      sysctls: {{ sysctls }}
{% endif %}

    nodeSelector:
      nvidia.com/ais-target: {{ cluster }}
    mounts:
{% for mpath in ais_mpaths %}
      - path: {{ mpath }}
        size: {{ ais_mpath_size }}
        storageClass: "ais-local-storage"
        selector:
          matchLabels:
            mpath: "pv{{ mpath | replace('/','-') }}"
{% endfor %}

  nodeImage: "{{ node_image }}"
  initImage: "{{ init_image }}"
{% if dynamic_state_sc != "" %}
  stateStorageClass: {{ dynamic_state_sc }}
{% else %}
  hostpathPrefix: "/etc/ais"
{% endif %}
  
{% if protocol == "https" %}
  tlsSecretName: {{ tls_secret }}
{% endif %}
  
{% if aws_secret_name != "" %}
  awsSecretName: "{{ aws_secret_name }}"
{% endif %}
{% if gcp_secret_name != "" %}
  gcpSecretName: {{ gcp_secret_name }}
{% endif %}
{% if authn_secret_name != "" %}
  authNSecretName: {{ authn_secret_name }}
{% endif %}

  # To be able to access the AIS deployment outside kubernetes cluster, set:
  # enableExternalLB: true
  # NOTE: For external access to work, the kubernetes cluster should have the capabilitly to create LoadBalancer services with valid external IP.
  # For local testing with `minikube` run `minikube tunnel` in background for emulation. ref: https://minikube.sigs.k8s.io/docs/commands/tunnel/
  enableExternalLB: false

{% if (hostname_map is defined) and (hostname_map != "") %}
  hostnameMap: {{ hostname_map }}
{% endif %}

{% if network_attachment != "" %}
  networkAttachment: "{{ network_attachment }}"
{% endif %}
  logsDir: "{{ logs_dir }}"
  clusterDomain: "{{ cluster_domain }}"