environments: 
  default:
    values:
    - https:
        enabled: false
      # Only controls secret creation, update AIS config "cloud" to use
      cloudSecrets:
        enabled: false
      # Whether to run hooks to create and delete PVs based on values
      createPV:
        enabled: false
      # Enable this to automatically label cluster nodes based on configuration.
      # This should be set to true the first time you deploy to ensure nodes are labeled correctly.
      # Subsequent runs can disable this unless node labels need to be updated.
      labelNodes:
        enabled: false
  sjc11:
    values: 
    - https:
        enabled: true
      cloudSecrets:
        enabled: false
      createPV:
        enabled: true
      labelNodes:
        enabled: false
    kubeContext: sjc11
  oci-iad:
    values: 
    - https:
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: true
      labelNodes:
        enabled: false
    kubeContext: oci-iad
  oci-iad-test:
    values: 
    - https:
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: true
      labelNodes:
        enabled: false
    kubeContext: oci-iad-test
  sjc4-dev:
    values: 
    - https:
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: false
      labelNodes:
        enabled: false
    kubeContext: sjc4-dev
  oci-ord:
    values: 
    - https:
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: true
      labelNodes:
        enabled: false
    kubeContext: oci-ord
  neb-fin:
    values: 
    - https:
        # Values used to template before deploying AuthN 
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: false
      labelNodes:
        enabled: false
    kubeContext: neb-fin
  neb-fin-test:
    values: 
    - https:
        enabled: false
      cloudSecrets:
        enabled: false
      createPV:
        enabled: false
      labelNodes:
        enabled: false
    kubeContext: neb-fin-test
---

releases:
  # Acquires a tls cert from the specified issuer and stores in a secret for AIS
  - name: ais-tls-cert
    namespace: ais
    createNamespace: true
    chart: charts/tls-cert
    version: 0.1.0
    condition: https.enabled
    values:
      - "./config/tls-cert/{{ .Environment.Name }}.yaml"
      - "./config/ais/{{ .Environment.Name }}.yaml"

  # Sets up cloud secrets for AIS pods to mount and use for accessing remote backends
  - name: ais-cloud-secrets
    namespace: ais
    createNamespace: true
    chart: charts/cloud-secrets
    version: 0.1.0
    condition: cloudSecrets.enabled
    values:
      - "./config/cloud/{{ .Environment.Name }}.yaml.gotmpl"
      - "./config/ais/{{ .Environment.Name }}.yaml"

  - name: ais-cluster
    namespace: ais
    createNamespace: true
    chart: charts/ais-cluster
    version: 0.4.0
    values:
      - "./config/ais/{{ .Environment.Name }}.yaml"
    hooks:
      # Install pre-req local-path-provisioner to the cluster
      - events: ["presync"]
        showlogs: true
        command: "kubectl"
        args:
          - "apply"
          - "-f"
          - "https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.31/deploy/local-path-storage.yaml"
      # Label nodes with AIS labels based on config
      - events: ["presync"]
        showlogs: true
        command: "./scripts/label-nodes.sh"
        args:
          - '{{ .Environment.Values.labelNodes.enabled }}'
          - '{{ (fromYaml (readFile (print "./config/ais/" .Environment.Name ".yaml"))).cluster }}'
          - '{{ (fromYaml (readFile (print "./config/cluster-setup/" .Environment.Name ".yaml"))).nodes | join "," }}'
      # Create persistent volumes if requested by this env
      - events: ["presync"]
        showlogs: true
        command: "./scripts/create-pvs.sh"
        args:
          - '{{ .Environment.Values.createPV.enabled }}'
          - './config/ais/{{ .Environment.Name }}.yaml'
          - './config/cluster-setup/{{ .Environment.Name }}.yaml'
          - '{{ .Release.Namespace }}'