apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "ais.fullname" . }}-target
  labels:
    app: {{ template "ais.name" . }}
    chart: {{ template "ais.chart" . }}
    component: "{{ .Values.target.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      release: {{ .Release.Name }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "ais.name" . }}
        component: "{{ .Values.target.name }}"
        release: {{ .Release.Name }}
    spec:
      initContainers:
        - name: populate-env
          image: {{ .Values.aiscluster.image.kubectl.repository }}:{{ .Values.aiscluster.image.kubectl.tag }}
          imagePullPolicy: {{ .Values.aiscluster.image.pullPolicy }}
          env:
            - name: MY_NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name : ROLE
              value : "target"
          command:
            - "/bin/bash"
          args: [ "-c", "/bin/bash /var/ais_config/set_uuid_env.sh" ]
          volumeMounts:
            - name: config-mount
              mountPath: "/var/ais_config"
            - name: env-mount
              mountPath: "/var/ais_env"

      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.aiscluster.image.aisnode.repository }}:{{ .Values.aiscluster.image.aisnode.tag }}"
          imagePullPolicy: {{ .Values.aiscluster.image.pullPolicy }}
          securityContext:
            # required for hostport to operate, or implement a full pod security policy
            privileged: true
            capabilities:
              add:
                {{ range .Values.aiscluster.k8s.container_capabilities }}
                - {{ . }}
                {{ end }}
          env:
            - name : CONFFILE
              value : "/var/ais_config/ais.json"
            - name: STATSDCONF
              value: "/var/statsd_config/statsd.json"
            - name : ROLE
              value : "target"
            - name: AIS_PODIP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: AIS_HOSTIP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: AIS_TARGET_HOSTPORT
              value: {{ .Values.aiscluster.target.hostPort | quote }}
            - name: AIS_NODISKIO
              value: {{ .Values.target.config.nodiskio.enabled | quote }}
            - name: AIS_DRYOBJSIZE
              value: {{ .Values.target.config.nodiskio.dryobjsize | quote }}
            - name: CLUSTERIP_PROXY_SERVICE_HOSTNAME
              value: {{ template "ais.fullname" . }}-proxy
            - name: CLUSTERIP_PROXY_SERVICE_PORT
              value: "{{ .Values.proxy.service.port }}"
          ports:
            - name: aistarget
              containerPort: {{ .Values.target.service.port }}
              {{ if and .Values.aiscluster.k8s.cluster_cidr .Values.aiscluster.target.hostPort }}
              hostPort: {{ .Values.aiscluster.target.hostPort }}
              {{ end }}
              protocol: TCP
          volumeMounts:
            - name: state-mount
              mountPath: "/etc/ais"
            - name: env-mount
              mountPath: /var/ais_env
            - name: config-mount
              mountPath: "/var/ais_config"
            - name: statsd-config
              mountPath: "/var/statsd_config"
            {{ range .Values.aiscluster.target.mountPaths }}
            - name: fspath{{ . | replace "/" "-" }}
              mountPath: "{{ . }}"
            {{ end }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/bash", "-c", "/usr/bin/pkill -SIGINT aisnode" ]
          livenessProbe:
            httpGet:
              path: /v1/health
              port: {{ .Values.target.service.port }}
            initialDelaySeconds: 90
            periodSeconds: 5
            failureThreshold: 3
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /v1/health
              port: {{ .Values.target.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 30 
            failureThreshold: 3
            timeoutSeconds: 5
          resources:
{{ toYaml .Values.target.resources | indent 12 }}
      securityContext:
        sysctls:
        - name: net.core.somaxconn
          value: {{ .Values.aiscluster.k8s.sysctls.somaxconn | quote }}
        - name: net.ipv4.ip_local_port_range
          value: "10240 65535"
      serviceAccount: {{ template "ais.name" . }}-sa
      nodeSelector:
         {{ .Values.target.nodeSelector.key }}: {{ template "ais.fullname" . }}
      volumes:
        - name: config-mount
          configMap:
            name:  {{ template "ais.name" . }}-target
        - name: env-mount
          hostPath:
            path: "{{ .Values.aiscluster.hostpathPrefix }}/{{ .Release.Name }}/target"
        - name: state-mount
          hostPath:
            path: "{{ .Values.aiscluster.hostpathPrefix }}/{{ .Release.Name }}/target"
        - name: statsd-config
          configMap:
            name: {{ template "ais.name" . }}-statsd
        {{ range .Values.aiscluster.target.mountPaths }}
        - name: fspath{{ . | replace "/" "-" }}
          hostPath:
            path: {{ . }} 
        {{ end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      imagePullSecrets:
        {{- range .Values.aiscluster.image.pullSecretNames }}
        - name: {{ . }}
        {{- end }}
