apiVersion: ais.nvidia.com/v1beta1
kind: AIStore
metadata:
  name: {{ .Values.global.cluster }}
  namespace: {{ .Release.namespace }}
spec:
  size: {{ .Values.size }}
  configToUpdate:
    {{- if eq .Values.protocol "https" }}
    net:
      http:
        server_crt: "/var/certs/tls.crt"
        server_key: "/var/certs/tls.key"
        use_https: true
        skip_verify: {{ .Values.https.skipVerifyCert }}
        client_ca_tls: "/var/certs/ca.crt"
        client_auth_tls: 0
    {{- end }}
  proxySpec:
    tolerations:
      {{- with .Values.proxySpec.tolerations }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    env:
      {{- with .Values.proxySpec.env }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- if .Values.proxySpec.size }}
    size: {{ .Values.proxySpec.size }}
    {{- end }}
    hostPort: 51080
    servicePort: 51080
    portPublic: 51080
    portIntraControl: 51081
    portIntraData: 51082
    capabilities:
      privileged: true
    # nodeSelector:
    #   {{ .Values.global.nodes }}
    nodeSelector:
      nvidia.com/ais-proxy: {{ .Values.global.cluster }}
    {{- if .Values.proxySpec.resources }}
    resources:
      {{- toYaml .Values.proxySpec.resources | nindent 6 }}
    {{- end }}
  targetSpec:
    tolerations:
      {{- with .Values.targetSpec.tolerations }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    env:
      {{- with .Values.targetSpec.env }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- if .Values.targetSpec.size }}
    size: {{ .Values.targetSpec.size }}
    {{- end }}
    hostPort: 51081
    servicePort: 51081
    portPublic: 51081
    portIntraControl: 51082
    portIntraData: 51083
    hostNetwork: {{ .Values.hostNetwork }}
    capabilities:
      privileged: true
    # nodeSelector:
    #   {{ .Values.global.nodes }}
    nodeSelector:
      nvidia.com/ais-target: {{ .Values.global.cluster }}
    mounts:
    {{- $size := .Values.global.mpath_size }}
    {{- range .Values.global.mpaths }}
      - path: {{ . }}
        size: {{ $size }}
        storageClass: "ais-local-storage"
        selector:
          matchLabels:
            mpath: pv-{{ . | replace "/" "-" | trimPrefix "-" }}
    {{- end }}
    {{- if .Values.targetSpec.resources }}
    resources:
      {{- toYaml .Values.targetSpec.resources | nindent 6 }}
    {{- end }}

  nodeImage: "{{ .Values.nodeImage.name }}:{{ .Values.nodeImage.tag }}"
  initImage: "{{ .Values.initImage.name }}:{{ .Values.initImage.tag }}"
  {{- if hasKey .Values "logSidecarImage" }}
  {{- if and (hasKey .Values.logSidecarImage "name") (hasKey .Values.logSidecarImage "tag") }}
  logSidecarImage: "{{ .Values.logSidecarImage.name }}:{{ .Values.logSidecarImage.tag }}"
  {{- end }}
  {{- end }}
  hostpathPrefix: {{ .Values.hostpathPrefix }}
  stateStorageClass: {{ .Values.stateStorageClass }}
  shutdownCluster: {{ .Values.shutdownCluster }}
  cleanupMetadata: {{ .Values.cleanupMetadata }}
  cleanupData: {{ .Values.cleanupData }}
  {{- if eq .Values.protocol "https" }}
  tlsSecretName: {{ .Values.https.tlsSecret }}
  {{- end }}
  awsSecretName: {{ .Values.cloud.awsSecretName }}
  gcpSecretName: {{ .Values.cloud.gcpSecretName }}
  authNSecretName: {{ .Values.authNSecretName }}
  enableExternalLB: false
  {{- with .Values.multihome.hostnameMap }}
  hostnameMap: {{ toJson . }}
  {{- end }}
  {{- if .Values.multihome.networkAttachment }}
  networkAttachment: "{{ .Values.multihome.networkAttachment }}"
  {{- end }}
  logsDir: {{ .Values.logsDir }}
  clusterDomain: cluster.local