---
grafanaAdminPassword: &grafanaAdminPassword your_grafana_password

aistoreMonitoringAffinity: &aistoreMonitoringAffinity
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: aistore.nvidia.com/role_monitoring
          operator: In
          values:
          - "true"

aistoreMonitoringSecurityContext: &aistoreMonitoringSecurityContext
  runAsGroup: 1002
  runAsNonRoot: true
  runAsUser: 1002
  fsGroup: 1002

prometheusOperator:
  affinity: *aistoreMonitoringAffinity

prometheus:
  prometheusSpec:
    securityContext: *aistoreMonitoringSecurityContext
    affinity: *aistoreMonitoringAffinity
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    ## Optional: add prometheus persistent storage here.
    ##
    # volumeClaimTemplate:
    #   spec:
    #     storageClassName:
    #     accessModes: ["ReadWriteOnce"]
    #     resources:
    #       requests:
    #         storage: 10Gi
    #   selector: {}

alertmanager:
  # OPTIONAL: enable slack notifications
  # config:
  #   route:
  #     receiver: 'slack-notifications'
  #     group_by: ['alertname']
  #     group_wait: 30s
  #     group_interval: 5m
  #     repeat_interval: 12h
  #     routes:
  #     - match:
  #         severity: critical
  #       receiver: 'slack-notifications'
  #     - match:
  #         severity: info
  #       receiver: 'slack-notifications'
  #   receivers:
  #   - name: 'slack-notifications'
  #     slack_configs:
  #     - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK' # Replace with your Slack webhook URL
  #       channel: '#ais-alerts' # Replace with your Slack channel
  #       send_resolved: true
  #       title: '{{ .CommonAnnotations.summary }}'
  #       text: |
  #         {{ range .Alerts }}
  #         {{ .Annotations.description }}
  #         {{ end }}
  alertmanagerSpec:
    securityContext: *aistoreMonitoringSecurityContext
    affinity: *aistoreMonitoringAffinity

thanosRuler:
  thanosRulerSpec:
    securityContext: *aistoreMonitoringSecurityContext
    affinity: *aistoreMonitoringAffinity

grafana:
  affinity: *aistoreMonitoringAffinity
  securityContext: *aistoreMonitoringSecurityContext
  adminPassword: *grafanaAdminPassword

kube-state-metrics:
  affinity: *aistoreMonitoringAffinity

defaultRules:
  rules:
    kubeControllerManager: false
    kubernetesStorage: false
    kubernetesSystem: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false
    nodeExporterAlerting: false
    nodeExporterRecording: false