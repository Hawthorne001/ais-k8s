image: ubuntu:18.04

stages:
  - build
  - test:short
  - test:long
  - push

variables:
  ADMIN_IMAGE: "aistore/admin"
  AISNODE_IMAGE: "aistore/aisnode"

before_script:
  - apt-get update -y && apt install -y docker.io build-essential
  - |
    echo '{"storage-driver": "vfs"}' >> /etc/docker/daemon.json
  - nohup dockerd >/dev/null 2>&1 & sleep 10
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD


.default_only_template: &default_only_def
  only:
    - master
    - merge_requests
    - schedules

build:operator:lint:
  stage: build
  image: aistore/ci:1.15
  timeout: 10m
  <<: *default_only_def
  script:
    - cd operator
    - make lint
    - make fmt-check
    - make spell-check

build:operator:
  stage: build
  image: aistore/ci:1.15
  timeout: 10m
  <<: *default_only_def
  script:
    - make -C operator manager

build:docker:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - mkdir -p /go/src/github.com/NVIDIA
    - pushd /go/src/github.com/NVIDIA
    - git clone https://github.com/NVIDIA/aistore.git
    - pushd aistore/deploy/prod/k8s/aisadmin_container
    - env IMAGE_REPO="${ADMIN_IMAGE}" IMAGE_TAG="nightly" make -e all
    - popd
    - pushd aistore/deploy/prod/k8s/aisnode_container
    - env IMAGE_REPO="${AISNODE_IMAGE}" IMAGE_TAG="nightly" make -e all
    - popd
    - popd
    - mkdir images
    - docker save --output="images/nightly.tar" "${ADMIN_IMAGE}:nightly" "${AISNODE_IMAGE}:nightly"
  artifacts:
    paths:
      - images/
    expire_in: 1h

operator:minikube-short:
  stage: test:short
  needs: ["build:operator:lint", "build:operator"]
  image: aistore/ci:1.15
  <<: *default_only_def
  tags:
    - ais-k8s
  timeout: 15m
  script:
   - make -C operator test-short

operator:minikube-long:
  stage: test:long
  needs: ["operator:minikube-short"]
  image: aistore/ci:1.15
  tags:
    - ais-k8s
  timeout: 30m
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - operator/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - make -C operator test

operator:gcp:
  stage: test:long
  # If minikube fails - don't bother to try GCP.
  needs: ["operator:minikube-short"]
  image: aistore/ci:1.15
  timeout: 60m
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*skip-ci-gcp.*/'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - operator/*
        - terraform/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcs.json"
  before_script:
    - apt-get update -y && apt install -y build-essential
    - make -C terraform ci-prepare
    - echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
  script:
    - make -C terraform ci-deploy-k8s
    - make -C operator test
  after_script:
    - make -C terraform destroy

helm:gcp:
  stage: test:long
  # Run immediately, don't require build:operator.
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_LABELS =~ /.*skip-ci-gcp.*/'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - terraform/*
        - helm/*
      allow_failure: true # TODO: Remove once pipeline is fully stable.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcs.json"
  before_script:
    - apt-get update -y && apt install -y build-essential
    - make -C terraform ci-prepare
    - echo "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
  script:
    - make -C terraform ci-deploy
    - make -C terraform ci-test
  after_script:
    - make -C terraform destroy

push:docker:
  stage: push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - docker load --input="images/nightly.tar"
    - docker tag "${ADMIN_IMAGE}:nightly" "${ADMIN_IMAGE}:latest"
    - docker push "${ADMIN_IMAGE}:latest"
    - docker tag "${AISNODE_IMAGE}:nightly" "${AISNODE_IMAGE}:latest"
    - docker push "${AISNODE_IMAGE}:latest"
